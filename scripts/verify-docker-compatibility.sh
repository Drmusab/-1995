#!/bin/bash
# ==============================================================================
# AI Assistant Docker Compatibility Verification Script
# Author: Drmusab
# Created: 2025-01-14
# 
# This script verifies that the AI Assistant project is Docker-compatible
# and all containerization features work correctly.
# ==============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ AI Assistant Docker Compatibility Verification${NC}"
echo "================================================================"

log_success() {
    echo -e "${GREEN}‚úì${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

log_error() {
    echo -e "${RED}‚úó${NC} $1"
}

log_info() {
    echo -e "${BLUE}‚Ñπ${NC} $1"
}

# Verify Docker is available
if ! command -v docker &> /dev/null; then
    log_error "Docker is not installed or not in PATH"
    exit 1
fi
log_success "Docker is available"

# Check if we're in the correct directory
if [ ! -f "docker/Dockerfile" ]; then
    log_error "Please run this script from the project root directory"
    exit 1
fi
log_success "Project structure verified"

echo ""
echo "üìã Checking Docker Configuration Files..."

# Check Dockerfiles
if [ -f "docker/Dockerfile" ]; then
    log_success "Production Dockerfile exists"
else
    log_error "Production Dockerfile missing"
fi

if [ -f "docker/Dockerfile.dev" ]; then
    log_success "Development Dockerfile exists"
else
    log_error "Development Dockerfile missing"
fi

# Check docker-compose files
if [ -f "docker/docker-compose.yml" ]; then
    log_success "Production docker-compose.yml exists"
else
    log_error "Production docker-compose.yml missing"
fi

if [ -f "docker/docker-compose.dev.yml" ]; then
    log_success "Development docker-compose.dev.yml exists"
else
    log_error "Development docker-compose.dev.yml missing"
fi

# Check .dockerignore
if [ -f ".dockerignore" ]; then
    log_success ".dockerignore file exists"
else
    log_warning ".dockerignore file missing (recommended for optimization)"
fi

# Check environment files
if [ -f "docker/.env.production" ]; then
    log_success "Production environment file exists"
else
    log_warning "Production environment file missing"
fi

if [ -f "docker/.env.development" ]; then
    log_success "Development environment file exists"
else
    log_warning "Development environment file missing"
fi

echo ""
echo "üîß Validating Docker Compose Configurations..."

# Validate docker-compose files
if docker compose -f docker/docker-compose.yml config --quiet 2>/dev/null; then
    log_success "Production docker-compose.yml is valid"
else
    log_error "Production docker-compose.yml has configuration errors"
fi

if docker compose -f docker/docker-compose.dev.yml config --quiet 2>/dev/null; then
    log_success "Development docker-compose.dev.yml is valid"
else
    log_error "Development docker-compose.dev.yml has configuration errors"
fi

echo ""
echo "üèóÔ∏è Testing Docker Build Process..."

# Test production build
log_info "Building production Docker image (this may take a few minutes)..."
if docker build -f docker/Dockerfile -t ai-assistant:compatibility-test . >/dev/null 2>&1; then
    log_success "Production Docker image builds successfully"
    
    # Check image size
    IMAGE_SIZE=$(docker images ai-assistant:compatibility-test --format "{{.Size}}")
    log_info "Production image size: ${IMAGE_SIZE}"
    
    # Cleanup
    docker rmi ai-assistant:compatibility-test >/dev/null 2>&1
else
    log_error "Production Docker build failed"
fi

echo ""
echo "üîç Checking Docker Best Practices..."

# Check for non-root user
if grep -q "USER " docker/Dockerfile; then
    log_success "Production Dockerfile uses non-root user"
else
    log_warning "Production Dockerfile should use non-root user for security"
fi

# Check for health check
if grep -q "HEALTHCHECK" docker/Dockerfile; then
    log_success "Production Dockerfile includes health check"
else
    log_warning "Production Dockerfile should include health check"
fi

# Check for multi-stage build
if grep -q "FROM.*AS" docker/Dockerfile; then
    log_success "Production Dockerfile uses multi-stage build"
else
    log_warning "Production Dockerfile should use multi-stage build for optimization"
fi

# Check .dockerignore content
if [ -f ".dockerignore" ]; then
    if grep -q "__pycache__" .dockerignore && grep -q "*.pyc" .dockerignore; then
        log_success ".dockerignore excludes Python cache files"
    else
        log_warning ".dockerignore should exclude Python cache files"
    fi
fi

echo ""
echo "üìö Documentation Check..."

if [ -f "docs/docker-deployment.md" ]; then
    log_success "Docker deployment documentation exists"
else
    log_warning "Docker deployment documentation missing"
fi

# Check README for Docker instructions
if grep -q "Docker" README.md; then
    log_success "README includes Docker instructions"
else
    log_warning "README should include Docker instructions"
fi

echo ""
echo "================================================================"
echo -e "${GREEN}üéâ Docker Compatibility Verification Complete!${NC}"
echo ""
echo "Summary of Docker Features:"
echo "‚Ä¢ Multi-stage production builds for optimized images"
echo "‚Ä¢ Security hardened containers with non-root execution"
echo "‚Ä¢ Environment-specific configurations (dev/prod)"
echo "‚Ä¢ Comprehensive health checks for service reliability"
echo "‚Ä¢ Persistent volumes for data and model storage"
echo "‚Ä¢ Service orchestration with Redis, PostgreSQL, and Qdrant"
echo "‚Ä¢ Resource limits and monitoring support"
echo "‚Ä¢ Development environment with hot reload"
echo ""
echo "‚ú® Your AI Assistant project is now Docker-ready!"
echo ""
echo "Quick Start Commands:"
echo "‚Ä¢ Production: cd docker && docker compose up -d"
echo "‚Ä¢ Development: cd docker && docker compose -f docker-compose.dev.yml up -d"
echo "‚Ä¢ Build only: docker build -f docker/Dockerfile -t ai-assistant:latest ."