[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-assistant"
version = "1.0.0"
description = "Advanced AI Assistant with multimodal processing, workflow orchestration, and extensible plugin system"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Drmusab", email = "drmusab@example.com"}
]
maintainers = [
    {name = "Drmusab", email = "drmusab@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
keywords = [
    "ai",
    "assistant",
    "nlp",
    "multimodal",
    "workflows",
    "plugins",
    "language-model",
    "speech",
    "vision",
]
requires-python = ">=3.10"
dependencies = [
    # Core dependencies
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "numpy>=1.24.0",
    "torch>=2.0.0",
    "asyncio>=3.4.3",
    "uvicorn>=0.22.0",
    "fastapi>=0.95.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.11.0",
    "redis>=4.5.0",
    "aiohttp>=3.8.0",
    "websockets>=11.0.0",
    "prometheus-client>=0.17.0",
    "opentelemetry-api>=1.18.0",
    "opentelemetry-sdk>=1.18.0",
    "structlog>=23.1.0",
    "toml>=0.10.2",
    "rich>=13.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.3.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.3.0",
    "pytest>=7.3.0",
    "pytest-cov>=4.1.0",
    "pre-commit>=3.3.0",
]
test = [
    "pytest>=7.3.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.81.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.23.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-tabs>=3.4.0",
]
all = [
    "ai-assistant[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/Drmusab/-1995"
Documentation = "https://github.com/Drmusab/-1995/docs"
Repository = "https://github.com/Drmusab/-1995"
"Bug Tracker" = "https://github.com/Drmusab/-1995/issues"
Changelog = "https://github.com/Drmusab/-1995/blob/main/CHANGELOG.md"

[project.scripts]
ai-assistant = "src.cli:main"
ai-assistant-server = "src.main:main"

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests", "tools", "docs", "examples"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml", "*.md", "*.txt"]

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["src"]
known_third_party = ["numpy", "torch", "pytest", "pydantic", "sqlalchemy", "redis", "aiohttp", "fastapi", "alembic", "openai", "asyncio"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "slow: marks tests as slow",
    "smoke: marks basic smoke tests",
    "performance: marks performance tests",
    "security: marks security tests",
    "resilience: marks resilience and fault tolerance tests",
]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-v",
    "--doctest-modules",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "docs.*",
]
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "torch.*",
    "scipy.*",
    "openai.*",
    "pytest.*",
    "setuptools.*",
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "aiohttp.*",
    "websockets.*",
    "prometheus_client.*",
    "opentelemetry.*",
    "toml.*",
    "rich.*",
    "psutil.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "src/*/migrations/*",
    "tests/*",
    "docs/*",
    "tools/*",
    "setup.py",
    "conftest.py",
    "*/__init__.py",
    "*/types.py",
    "*/constants.py",
]
concurrency = ["multiprocessing", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError",
]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"