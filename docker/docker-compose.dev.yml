services:
  ai_assistant_dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
    image: ai_assistant:dev
    container_name: ai_assistant_dev
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080"
      - "50051:50051"
    volumes:
      - ..:/app  # Mount the entire project for development
      - ai_data_dev:/data
    env_file:
      - .env.development
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      vector_db:
        condition: service_started
    networks:
      - ai_network_dev
    command: python -m src.main --config /app/configs/environments/development.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: ai_assistant_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ai_network_dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: ai_assistant_postgres_dev
    restart: unless-stopped
    environment:
      - POSTGRES_USER=ai_assistant
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_DB=ai_assistant_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - ai_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_assistant"]
      interval: 10s
      timeout: 5s
      retries: 3

  vector_db:
    image: qdrant/qdrant:latest
    container_name: ai_assistant_vector_db_dev
    restart: unless-stopped
    ports:
      - "6333:6333"
    networks:
      - ai_network_dev

networks:
  ai_network_dev:
    driver: bridge

volumes:
  postgres_data_dev:
  ai_data_dev:
