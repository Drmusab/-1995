# =========================================================
# AI Assistant Skills Configuration
# =========================================================
# Author: Drmusab
# Last Modified: 2025-07-05 11:54:27
# Version: 1.0.0
# =========================================================

# Global skill settings
global:
  skills_directory: "${DATA_DIR:-/data/ai_assistant}/skills"
  auto_discovery: true
  validate_skills: true
  max_execution_time: 30  # seconds
  enable_caching: true
  cache_ttl: 3600  # seconds
  execution_tracking: true
  skill_versioning: true
  sandbox_execution: true
  skill_composition_enabled: true
  enable_skill_metrics: true
  default_skill_timeout: 15  # seconds
  skill_registry_path: "${DATA_DIR:-/data/ai_assistant}/skills/registry.json"
  skill_templates_path: "${DATA_DIR:-/data/ai_assistant}/skills/templates"
  custom_skills_path: "${DATA_DIR:-/data/ai_assistant}/skills/custom"
  max_skill_memory_mb: 512
  log_skill_executions: true
  enable_skill_profiling: false
  default_language: "en"

# Skill categories
categories:
  core:
    description: "Essential system capabilities"
    priority: 1
    always_available: true
    requires_authentication: false
    internal: true
    
  conversation:
    description: "Conversational skills for natural interaction"
    priority: 2
    always_available: true
    requires_authentication: false
    internal: false
    
  productivity:
    description: "Productivity and task management capabilities"
    priority: 3
    always_available: true
    requires_authentication: true
    internal: false
    
  knowledge:
    description: "Knowledge retrieval and information processing"
    priority: 3
    always_available: true
    requires_authentication: false
    internal: false
    
  creative:
    description: "Creative and generative capabilities"
    priority: 4
    always_available: true
    requires_authentication: true
    internal: false
    
  analytical:
    description: "Data analysis and reasoning capabilities"
    priority: 4
    always_available: true
    requires_authentication: true
    internal: false
    
  system:
    description: "System management and administration"
    priority: 1
    always_available: true
    requires_authentication: true
    internal: true
    admin_only: true
    
  custom:
    description: "User-defined custom skills"
    priority: 5
    always_available: false
    requires_authentication: true
    internal: false
    
  meta_cognitive:
    description: "Meta-cognitive and self-awareness capabilities"
    priority: 3
    always_available: true
    requires_authentication: true
    internal: false

# Core skills
core_skills:
  help:
    id: "core.help"
    name: "Help"
    description: "Provides help and information about available skills"
    category: "core"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.HelpSkill"
    triggers:
      - "help"
      - "how to use"
      - "what can you do"
      - "available skills"
      - "commands"
    parameters:
      skill_name:
        type: "string"
        required: false
        description: "Name of skill to get help for"
    examples:
      - "Help me understand what you can do"
      - "What skills do you have?"
      - "Help with the translation skill"
    requires_context: false
    caching_enabled: true
    timeout: 5
    
  feedback:
    id: "core.feedback"
    name: "Feedback"
    description: "Collects user feedback for continuous improvement"
    category: "core"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.FeedbackSkill"
    triggers:
      - "feedback"
      - "rate"
      - "improve"
    parameters:
      rating:
        type: "integer"
        required: false
        description: "Rating from 1-5"
        min_value: 1
        max_value: 5
      comment:
        type: "string"
        required: false
        description: "Feedback comments"
    requires_context: true
    caching_enabled: false
    timeout: 10
    
  session:
    id: "core.session"
    name: "Session Management"
    description: "Manages user sessions and conversations"
    category: "core"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.SessionSkill"
    triggers:
      - "new session"
      - "clear context"
      - "forget"
      - "start over"
    parameters:
      action:
        type: "string"
        required: false
        description: "Session action (new, clear, save, restore)"
        allowed_values: ["new", "clear", "save", "restore"]
    requires_context: true
    caching_enabled: false
    timeout: 5
    
  settings:
    id: "core.settings"
    name: "User Settings"
    description: "Manages user preferences and settings"
    category: "core"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.SettingsSkill"
    triggers:
      - "settings"
      - "preferences"
      - "configure"
    parameters:
      setting_name:
        type: "string"
        required: false
        description: "Name of setting to get or change"
      setting_value:
        type: "any"
        required: false
        description: "New value for the setting"
    requires_context: true
    caching_enabled: false
    timeout: 5
    persists_data: true

# Conversation skills
conversation_skills:
  chat:
    id: "conversation.chat"
    name: "Chat"
    description: "General conversational capabilities"
    category: "conversation"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.ChatSkill"
    triggers:
      - "*"  # Fallback for general conversation
    parameters: {}
    requires_context: true
    caching_enabled: false
    timeout: 15
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
      - "language_models.ollama.llama3"
    
  personality:
    id: "conversation.personality"
    name: "Personality"
    description: "Configures the assistant's personality and tone"
    category: "conversation"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.PersonalitySkill"
    triggers:
      - "personality"
      - "tone"
      - "be more"
    parameters:
      personality_type:
        type: "string"
        required: false
        description: "Type of personality to adopt"
        allowed_values: ["professional", "friendly", "concise", "detailed", "humorous", "empathetic"]
    requires_context: true
    caching_enabled: false
    timeout: 5
    persists_data: true
    
  conversation_summarizer:
    id: "conversation.summarizer"
    name: "Conversation Summarizer"
    description: "Summarizes the current conversation"
    category: "conversation"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.ConversationSummarizerSkill"
    triggers:
      - "summarize conversation"
      - "recap"
      - "what have we discussed"
    parameters:
      length:
        type: "string"
        required: false
        description: "Length of summary"
        allowed_values: ["brief", "detailed"]
        default: "brief"
    requires_context: true
    caching_enabled: true
    timeout: 15
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  emotion_detection:
    id: "conversation.emotion_detection"
    name: "Emotion Detection"
    description: "Detects user emotions from text"
    category: "conversation"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.EmotionDetectionSkill"
    triggers:
      - "detect emotion"
      - "how do I feel"
    parameters: {}
    requires_context: true
    caching_enabled: true
    timeout: 5
    models:
      - "special_purpose_models.sentiment_analysis.distilbert_sentiment"

# Productivity skills
productivity_skills:
  todo:
    id: "productivity.todo"
    name: "Todo List"
    description: "Manages user to-do lists and tasks"
    category: "productivity"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.productivity_skills.TodoSkill"
    triggers:
      - "todo"
      - "task"
      - "remind me"
      - "add task"
      - "list tasks"
    parameters:
      action:
        type: "string"
        required: false
        description: "Action to perform (add, list, complete, delete)"
        allowed_values: ["add", "list", "complete", "delete"]
        default: "list"
      task:
        type: "string"
        required: false
        description: "Task description"
      priority:
        type: "string"
        required: false
        description: "Task priority"
        allowed_values: ["high", "medium", "low"]
        default: "medium"
    examples:
      - "Add a task to call John tomorrow"
      - "What are my tasks for today?"
      - "Mark the shopping task as complete"
    requires_context: true
    caching_enabled: false
    timeout: 10
    persists_data: true
    
  calendar:
    id: "productivity.calendar"
    name: "Calendar"
    description: "Manages calendar events and schedules"
    category: "productivity"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.productivity_skills.CalendarSkill"
    triggers:
      - "calendar"
      - "schedule"
      - "event"
      - "meeting"
      - "appointment"
    parameters:
      action:
        type: "string"
        required: false
        description: "Action to perform (view, create, update, delete)"
        allowed_values: ["view", "create", "update", "delete"]
        default: "view"
      date:
        type: "string"
        required: false
        description: "Date for the event"
      time:
        type: "string"
        required: false
        description: "Time for the event"
      title:
        type: "string"
        required: false
        description: "Event title"
      duration:
        type: "string"
        required: false
        description: "Event duration"
        default: "1 hour"
    examples:
      - "What's on my calendar today?"
      - "Schedule a meeting with marketing team tomorrow at 2pm"
      - "Cancel my 3pm appointment"
    requires_context: true
    caching_enabled: false
    timeout: 15
    integrations:
      - "external_apis.calendar"
    persists_data: true
    
  email_assistant:
    id: "productivity.email"
    name: "Email Assistant"
    description: "Helps draft and summarize emails"
    category: "productivity"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.productivity_skills.EmailSkill"
    triggers:
      - "email"
      - "draft"
      - "compose"
      - "summarize email"
    parameters:
      action:
        type: "string"
        required: false
        description: "Action to perform (draft, summarize)"
        allowed_values: ["draft", "summarize", "reply"]
        default: "draft"
      recipient:
        type: "string"
        required: false
        description: "Email recipient"
      subject:
        type: "string"
        required: false
        description: "Email subject"
      tone:
        type: "string"
        required: false
        description: "Email tone"
        allowed_values: ["professional", "friendly", "formal", "casual"]
        default: "professional"
      content:
        type: "string"
        required: false
        description: "Email content or summary requirements"
    examples:
      - "Draft an email to my boss about project completion"
      - "Summarize this email thread"
      - "Help me reply to this email professionally"
    requires_context: true
    caching_enabled: false
    timeout: 20
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  notes:
    id: "productivity.notes"
    name: "Notes"
    description: "Manages notes and quick information storage"
    category: "productivity"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.productivity_skills.NotesSkill"
    triggers:
      - "note"
      - "save"
      - "remember"
      - "retrieve"
    parameters:
      action:
        type: "string"
        required: false
        description: "Action to perform (save, list, get, delete)"
        allowed_values: ["save", "list", "get", "delete", "search"]
        default: "list"
      title:
        type: "string"
        required: false
        description: "Note title"
      content:
        type: "string"
        required: false
        description: "Note content"
      tags:
        type: "array"
        required: false
        description: "Tags for categorizing notes"
    examples:
      - "Save a note about the new project requirements"
      - "List all my notes about marketing"
      - "Get my note titled 'Project Ideas'"
    requires_context: true
    caching_enabled: false
    timeout: 10
    persists_data: true

# Knowledge skills
knowledge_skills:
  web_search:
    id: "knowledge.web_search"
    name: "Web Search"
    description: "Searches the web for information"
    category: "knowledge"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.WebSearchSkill"
    triggers:
      - "search"
      - "find information"
      - "look up"
      - "search for"
    parameters:
      query:
        type: "string"
        required: true
        description: "Search query"
      num_results:
        type: "integer"
        required: false
        description: "Number of results to return"
        default: 5
        min_value: 1
        max_value: 10
    examples:
      - "Search for recent developments in AI"
      - "Look up recipe for chocolate cake"
      - "Find information about climate change mitigation strategies"
    requires_context: false
    caching_enabled: true
    timeout: 20
    integrations:
      - "external_apis.web_search"
    
  translator:
    id: "knowledge.translator"
    name: "Translator"
    description: "Translates text between languages"
    category: "knowledge"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.TranslatorSkill"
    triggers:
      - "translate"
      - "translation"
      - "in spanish"
      - "in french"
      - "to english"
    parameters:
      text:
        type: "string"
        required: false
        description: "Text to translate"
      source_language:
        type: "string"
        required: false
        description: "Source language"
        default: "auto"
      target_language:
        type: "string"
        required: true
        description: "Target language"
    examples:
      - "Translate 'hello world' to French"
      - "What is 'good morning' in Japanese?"
      - "Translate this document to Spanish"
    requires_context: false
    caching_enabled: true
    timeout: 10
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  knowledge_base:
    id: "knowledge.knowledge_base"
    name: "Knowledge Base"
    description: "Retrieves information from the assistant's knowledge base"
    category: "knowledge"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.KnowledgeBaseSkill"
    triggers:
      - "knowledge"
      - "fact"
      - "information about"
      - "tell me about"
    parameters:
      query:
        type: "string"
        required: true
        description: "Knowledge query"
      sources:
        type: "boolean"
        required: false
        description: "Whether to include sources"
        default: false
    examples:
      - "Tell me about quantum computing"
      - "What is the capital of France?"
      - "Information about climate change with sources"
    requires_context: false
    caching_enabled: true
    timeout: 15
    
  weather:
    id: "knowledge.weather"
    name: "Weather"
    description: "Provides weather information and forecasts"
    category: "knowledge"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.WeatherSkill"
    triggers:
      - "weather"
      - "forecast"
      - "temperature"
      - "rain"
      - "sunny"
    parameters:
      location:
        type: "string"
        required: false
        description: "Location for weather information"
      days:
        type: "integer"
        required: false
        description: "Number of days for forecast"
        default: 1
        min_value: 1
        max_value: 7
    examples:
      - "What's the weather like in New York today?"
      - "Will it rain in London tomorrow?"
      - "5-day forecast for Tokyo"
    requires_context: false
    caching_enabled: true
    cache_ttl: 1800  # 30 minutes
    timeout: 10
    integrations:
      - "external_apis.weather"

# Creative skills
creative_skills:
  content_generator:
    id: "creative.content_generator"
    name: "Content Generator"
    description: "Generates creative content based on prompts"
    category: "creative"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.creative_skills.ContentGeneratorSkill"
    triggers:
      - "generate"
      - "create content"
      - "write"
      - "draft"
    parameters:
      content_type:
        type: "string"
        required: true
        description: "Type of content to generate"
        allowed_values: ["blog", "story", "poem", "essay", "description", "social"]
      topic:
        type: "string"
        required: true
        description: "Topic or subject"
      style:
        type: "string"
        required: false
        description: "Writing style"
        default: "professional"
      length:
        type: "string"
        required: false
        description: "Content length"
        allowed_values: ["short", "medium", "long"]
        default: "medium"
    examples:
      - "Write a short poem about mountains"
      - "Generate a blog post about sustainable fashion"
      - "Create social media content for a new coffee shop"
    requires_context: false
    caching_enabled: false
    timeout: 30
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  storyteller:
    id: "creative.storyteller"
    name: "Storyteller"
    description: "Creates and tells interactive stories"
    category: "creative"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.creative_skills.StorytellerSkill"
    triggers:
      - "story"
      - "tale"
      - "tell me a story"
      - "interactive story"
    parameters:
      genre:
        type: "string"
        required: false
        description: "Story genre"
        allowed_values: ["fantasy", "mystery", "sci-fi", "romance", "adventure", "horror", "comedy"]
        default: "adventure"
      audience:
        type: "string"
        required: false
        description: "Target audience"
        allowed_values: ["children", "teens", "adults"]
        default: "adults"
      interactive:
        type: "boolean"
        required: false
        description: "Whether the story is interactive"
        default: true
    examples:
      - "Tell me a fantasy story"
      - "Create an interactive mystery for adults"
      - "Tell a children's bedtime story"
    requires_context: true
    caching_enabled: false
    timeout: 25
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  image_describer:
    id: "creative.image_describer"
    name: "Image Describer"
    description: "Describes and analyzes images"
    category: "creative"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.creative_skills.ImageDescriberSkill"
    triggers:
      - "describe image"
      - "what's in this picture"
      - "analyze image"
    parameters:
      detail_level:
        type: "string"
        required: false
        description: "Level of description detail"
        allowed_values: ["basic", "detailed", "comprehensive"]
        default: "detailed"
      focus:
        type: "string"
        required: false
        description: "Aspect to focus on"
        allowed_values: ["general", "people", "objects", "scene", "text", "emotions", "colors"]
        default: "general"
    examples:
      - "Describe this image"
      - "What's in this picture?"
      - "Analyze this image focusing on the people in it"
    requires_context: false
    caching_enabled: true
    timeout: 15
    models:
      - "multimodal_models.openai_gpt4v"
      - "multimodal_models.local_llava"
    
  brainstormer:
    id: "creative.brainstormer"
    name: "Brainstormer"
    description: "Generates ideas and facilitates brainstorming sessions"
    category: "creative"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.creative_skills.BrainstormerSkill"
    triggers:
      - "brainstorm"
      - "ideas"
      - "think of"
      - "suggestions"
    parameters:
      topic:
        type: "string"
        required: true
        description: "Topic to brainstorm about"
      count:
        type: "integer"
        required: false
        description: "Number of ideas to generate"
        default: 5
        min_value: 1
        max_value: 20
      approach:
        type: "string"
        required: false
        description: "Brainstorming approach"
        allowed_values: ["creative", "practical", "innovative", "traditional"]
        default: "creative"
    examples:
      - "Brainstorm names for a new pet store"
      - "Give me 10 innovative ideas for reducing plastic waste"
      - "Help me think of content topics for my tech blog"
    requires_context: false
    caching_enabled: false
    timeout: 20
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"

# Analytical skills
analytical_skills:
  calculator:
    id: "analytical.calculator"
    name: "Calculator"
    description: "Performs mathematical calculations"
    category: "analytical"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.CalculatorSkill"
    triggers:
      - "calculate"
      - "compute"
      - "solve"
      - "math"
      - "equation"
    parameters:
      expression:
        type: "string"
        required: true
        description: "Mathematical expression to evaluate"
      precision:
        type: "integer"
        required: false
        description: "Decimal precision"
        default: 4
        min_value: 0
        max_value: 10
    examples:
      - "Calculate 15% of 67.50"
      - "What is the square root of 144?"
      - "Solve 3x + 7 = 22"
    requires_context: false
    caching_enabled: true
    timeout: 5
    
  data_analyzer:
    id: "analytical.data_analyzer"
    name: "Data Analyzer"
    description: "Analyzes data and generates insights"
    category: "analytical"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.DataAnalyzerSkill"
    triggers:
      - "analyze data"
      - "statistics"
      - "analyze"
      - "trends"
    parameters:
      data_format:
        type: "string"
        required: false
        description: "Format of the data"
        allowed_values: ["csv", "json", "table", "text"]
        default: "csv"
      analysis_type:
        type: "string"
        required: false
        description: "Type of analysis to perform"
        allowed_values: ["summary", "correlation", "prediction", "comparison", "trend"]
        default: "summary"
      visualization:
        type: "boolean"
        required: false
        description: "Whether to generate visualizations"
        default: false
    examples:
      - "Analyze this CSV data of monthly sales"
      - "Find trends in this customer feedback data"
      - "Generate statistics for this dataset"
    requires_context: false
    caching_enabled: false
    timeout: 30
    
  summarizer:
    id: "analytical.summarizer"
    name: "Summarizer"
    description: "Summarizes long texts and documents"
    category: "analytical"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.SummarizerSkill"
    triggers:
      - "summarize"
      - "summary"
      - "tl;dr"
      - "key points"
    parameters:
      text:
        type: "string"
        required: true
        description: "Text to summarize"
      length:
        type: "string"
        required: false
        description: "Summary length"
        allowed_values: ["brief", "medium", "detailed"]
        default: "medium"
      focus:
        type: "string"
        required: false
        description: "Focus of the summary"
        allowed_values: ["general", "key points", "action items", "conclusions"]
        default: "general"
    examples:
      - "Summarize this article about renewable energy"
      - "Give me a brief summary of this research paper"
      - "TL;DR of this product documentation"
    requires_context: false
    caching_enabled: true
    timeout: 20
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    
  decision_helper:
    id: "analytical.decision_helper"
    name: "Decision Helper"
    description: "Helps analyze decisions and options"
    category: "analytical"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.analytical_skills.DecisionHelperSkill"
    triggers:
      - "decision"
      - "choose"
      - "pros and cons"
      - "compare options"
    parameters:
      decision:
        type: "string"
        required: true
        description: "Decision to analyze"
      options:
        type: "array"
        required: false
        description: "Options to consider"
      criteria:
        type: "array"
        required: false
        description: "Criteria for evaluation"
    examples:
      - "Help me decide between job offers in New York and San Francisco"
      - "Compare these three laptops for a college student"
      - "List pros and cons of moving to a smaller apartment"
    requires_context: true
    caching_enabled: false
    timeout: 25
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"

# System skills
system_skills:
  admin:
    id: "system.admin"
    name: "Admin"
    description: "Administrative functions for system management"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.AdminSkill"
    triggers:
      - "admin"
      - "system"
      - "manage"
    parameters:
      action:
        type: "string"
        required: true
        description: "Admin action to perform"
        allowed_values: ["status", "restart", "configure", "logs", "users", "backup", "update"]
      target:
        type: "string"
        required: false
        description: "Target of the action"
    requires_context: false
    caching_enabled: false
    timeout: 30
    requires_permission: "admin"
    
  model_manager:
    id: "system.model_manager"
    name: "Model Manager"
    description: "Manages AI models used by the system"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.ModelManagerSkill"
    triggers:
      - "model"
      - "ai model"
      - "llm"
    parameters:
      action:
        type: "string"
        required: true
        description: "Model management action"
        allowed_values: ["list", "status", "switch", "update", "benchmark"]
      model_name:
        type: "string"
        required: false
        description: "Name of the model to manage"
    requires_context: false
    caching_enabled: false
    timeout: 20
    requires_permission: "admin"
    
  skill_manager:
    id: "system.skill_manager"
    name: "Skill Manager"
    description: "Manages skills and their configurations"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.SkillManagerSkill"
    triggers:
      - "skill manager"
      - "manage skills"
      - "skills config"
    parameters:
      action:
        type: "string"
        required: true
        description: "Skill management action"
        allowed_values: ["list", "enable", "disable", "install", "uninstall", "update"]
      skill_id:
        type: "string"
        required: false
        description: "ID of the skill to manage"
    requires_context: false
    caching_enabled: false
    timeout: 15
    requires_permission: "admin"
    
  diagnostic:
    id: "system.diagnostic"
    name: "Diagnostic"
    description: "System diagnostics and troubleshooting"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.core_skills.DiagnosticSkill"
    triggers:
      - "diagnostic"
      - "troubleshoot"
      - "system health"
      - "performance"
    parameters:
      component:
        type: "string"
        required: false
        description: "System component to diagnose"
      level:
        type: "string"
        required: false
        description: "Diagnostic detail level"
        allowed_values: ["basic", "detailed", "comprehensive"]
        default: "basic"
    requires_context: false
    caching_enabled: false
    timeout: 30
    requires_permission: "admin"

# Meta-cognitive skills
meta_cognitive_skills:
  thought_reflector:
    id: "meta_cognitive.thought_reflector"
    name: "Thought Reflector"
    description: "Meta-cognitive skill for analyzing thought patterns and generating reflective insights"
    category: "meta_cognitive"
    version: "1.0.0"
    entrypoint: "src.skills.builtin.thought_reflector.ThoughtReflectorSkill"
    triggers:
      - "weekly summary"
      - "thought patterns"
      - "reflection"
      - "problem solving style"
      - "journaling prompt"
      - "affirmation"
      - "reframe"
      - "deeper inquiry"
      - "meta cognition"
      - "self awareness"
    parameters:
      action:
        type: "string"
        required: false
        description: "Type of reflection to generate"
        allowed_values: ["weekly_summary", "problem_solving_style", "journaling_prompt", "affirmation", "reframing_exercise", "deeper_inquiry"]
        default: "weekly_summary"
      time_window:
        type: "integer"
        required: false
        description: "Number of days to analyze (for pattern detection)"
        default: 7
        min_value: 1
        max_value: 30
      include_examples:
        type: "boolean"
        required: false
        description: "Whether to include examples in pattern analysis"
        default: true
    examples:
      - "Give me a weekly summary of my thought patterns"
      - "What's my problem-solving style?"
      - "Generate a journaling prompt for me"
      - "I need an affirmation based on my recent thoughts"
      - "Help me reframe this challenging situation"
      - "Give me some deeper questions to reflect on"
    requires_context: true
    caching_enabled: false
    timeout: 30
    persists_data: true
    models:
      - "language_models.openai.gpt-4"
      - "language_models.openai.gpt-3.5-turbo"
    configuration:
      analysis_window_days: 7
      min_interactions: 5
      confidence_threshold: 0.6
      enable_weekly_summaries: true
      enable_style_analysis: true
      enable_affirmations: true
      storage_directory: "${DATA_DIR:-/data/ai_assistant}/thought_reflections"

# Meta skills (skills that work with other skills)
meta_skills:
  skill_installer:
    id: "meta.skill_installer"
    name: "Skill Installer"
    description: "Installs new skills from repositories or local files"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.meta_skills.skill_installer.SkillInstallerSkill"
    triggers:
      - "install skill"
      - "add skill"
      - "get skill"
    parameters:
      source:
        type: "string"
        required: true
        description: "Source of the skill (URL or local path)"
      verify:
        type: "boolean"
        required: false
        description: "Whether to verify the skill before installation"
        default: true
    requires_context: false
    caching_enabled: false
    timeout: 60
    requires_permission: "admin"
    
  skill_composer:
    id: "meta.skill_composer"
    name: "Skill Composer"
    description: "Creates composite skills from existing skills"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.meta_skills.skill_composer.SkillComposerSkill"
    triggers:
      - "compose skill"
      - "create workflow"
      - "chain skills"
    parameters:
      name:
        type: "string"
        required: true
        description: "Name for the composite skill"
      skills:
        type: "array"
        required: true
        description: "Skills to compose"
      execution_mode:
        type: "string"
        required: false
        description: "Execution mode for the skills"
        allowed_values: ["sequential", "parallel", "conditional"]
        default: "sequential"
    requires_context: false
    caching_enabled: false
    timeout: 30
    requires_permission: "admin"
    
  skill_optimizer:
    id: "meta.skill_optimizer"
    name: "Skill Optimizer"
    description: "Analyzes and optimizes skill performance"
    category: "system"
    version: "1.0.0"
    entrypoint: "src.skills.meta_skills.skill_optimizer.SkillOptimizerSkill"
    triggers:
      - "optimize skill"
      - "skill performance"
      - "tune skill"
    parameters:
      skill_id:
        type: "string"
        required: true
        description: "ID of the skill to optimize"
      optimization_target:
        type: "string"
        required: false
        description: "Target of optimization"
        allowed_values: ["speed", "accuracy", "resource_usage", "all"]
        default: "all"
    requires_context: false
    caching_enabled: false
    timeout: 45
    requires_permission: "admin"

# Skill composition templates
skill_compositions:
  research_assistant:
    id: "composition.research_assistant"
    name: "Research Assistant"
    description: "Comprehensive research workflow"
    skills:
      - id: "knowledge.web_search"
        order: 1
      - id: "analytical.summarizer"
        order: 2
      - id: "analytical.data_analyzer"
        order: 3
        conditional: true
      - id: "creative.content_generator"
        order: 4
    parameters:
      topic:
        type: "string"
        required: true
        description: "Research topic"
      depth:
        type: "string"
        required: false
        description: "Research depth"
        allowed_values: ["basic", "intermediate", "academic"]
        default: "intermediate"
    triggers:
      - "research"
      - "comprehensive search"
      - "deep dive"
    
  content_creator:
    id: "composition.content_creator"
    name: "Content Creator"
    description: "End-to-end content creation workflow"
    skills:
      - id: "creative.brainstormer"
        order: 1
      - id: "creative.content_generator"
        order: 2
      - id: "analytical.summarizer"
        order: 3
        conditional: true
    parameters:
      content_type:
        type: "string"
        required: true
        description: "Type of content to create"
        allowed_values: ["blog", "social", "email", "report", "presentation"]
      topic:
        type: "string"
        required: true
        description: "Content topic"
      tone:
        type: "string"
        required: false
        description: "Content tone"
        allowed_values: ["professional", "casual", "academic", "persuasive"]
        default: "professional"
    triggers:
      - "create content"
      - "full content"
      - "content workflow"

# Skill marketplace integration
marketplace:
  enabled: true
  url: "https://marketplace.example.com/api/skills"
  auto_update_check: true
  update_check_interval: 86400  # 24 hours
  trusted_sources:
    - "official-repository"
    - "verified-developers"
  installation_verification: true
  api_key: "${MARKETPLACE_API_KEY:-}"

# Custom skill templates
skill_templates:
  python_function:
    id: "template.python_function"
    name: "Python Function"
    description: "Template for Python function-based skills"
    file_structure:
      - "skill.py"
      - "requirements.txt"
      - "manifest.json"
      - "README.md"
    template_files:
      - path: "skill.py"
        content_template: |
          from typing import Dict, Any
          
          def execute(parameters: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
              """
              Main skill execution function.
              
              Args:
                  parameters: The parameters passed to the skill
                  context: The current context
                  
              Returns:
                  Dict containing the skill results
              """
              # Your code here
              return {"result": "Success"}
    
  web_api:
    id: "template.web_api"
    name: "Web API"
    description: "Template for web API-based skills"
    file_structure:
      - "skill.py"
      - "requirements.txt"
      - "manifest.json"
      - "README.md"
    template_files:
      - path: "skill.py"
        content_template: |
          import requests
          from typing import Dict, Any
          
          def execute(parameters: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
              """
              Web API skill execution function.
              
              Args:
                  parameters: The parameters passed to the skill
                  context: The current context
                  
              Returns:
                  Dict containing the API response
              """
              api_url = "https://api.example.com/endpoint"
              response = requests.get(api_url, params=parameters)
              return {"status_code": response.status_code, "data": response.json()}

# Permission levels for skills
permission_levels:
  guest:
    allowed_categories:
      - "core"
      - "conversation"
      - "knowledge"
    denied_skills:
      - "system.admin"
      - "system.diagnostic"
      - "meta.skill_installer"
    max_execution_time: 20
    
  user:
    allowed_categories:
      - "core"
      - "conversation"
      - "knowledge"
      - "productivity"
      - "creative"
      - "analytical"
      - "meta_cognitive"
    denied_skills:
      - "system.admin"
      - "system.diagnostic"
      - "meta.skill_installer"
    max_execution_time: 45
    
  premium:
    allowed_categories:
      - "core"
      - "conversation"
      - "knowledge"
      - "productivity"
      - "creative"
      - "analytical"
      - "meta_cognitive"
      - "custom"
    denied_skills:
      - "system.admin"
    max_execution_time: 120
    
  admin:
    allowed_categories: 
      - "*"
    denied_skills: []
    max_execution_time: 300

# Environment-specific overrides
environment_overrides:
  development:
    global:
      validate_skills: false
      sandbox_execution: false
      skill_composition_enabled: true
      enable_skill_profiling: true
    marketplace:
      enabled: false
    
  staging:
    global:
      validate_skills: true
      sandbox_execution: true
      enable_skill_profiling: true
    marketplace:
      enabled: true
      trusted_sources:
        - "official-repository"
    
  production:
    global:
      validate_skills: true
      sandbox_execution: true
      enable_skill_profiling: false
    marketplace:
      enabled: true
      trusted_sources:
        - "official-repository"
        - "verified-developers"
